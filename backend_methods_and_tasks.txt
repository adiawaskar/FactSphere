Backend Methods Needed for Frontend:
1. POST /api/fact-check: Submit article/text for misinformation analysis. Expects JSON payload with 'content' field. Returns analysis ID and initial status.
2. GET /api/fact-check/{id}: Retrieve fact-check results by ID. Returns JSON with 'status' (pending/complete), 'score' (misinformation probability), and 'details' (explanation).
3. POST /api/user/login: Authenticate user for personalized features. Expects 'username' and 'password'. Returns JWT token.
4. GET /api/notifications: Fetch real-time updates (e.g., via polling or WebSocket). Returns list of recent fact-checks or alerts.
5. WebSocket /ws/updates: Establish real-time connection for live updates on fact-check progress.

Pending Tasks for Real-Time Frontend Operation:
1. Implement backend server (e.g., using Node.js/Express or Python/Flask) with the above endpoints.
2. Set up database (e.g., MongoDB or PostgreSQL) to store fact-check requests, results, and user data.
3. Integrate fact-checking AI/ML model (e.g., via API calls to services like Google Fact Check Tools or custom NLP models).
4. Add authentication middleware to secure endpoints.
5. Implement WebSocket support for real-time notifications (e.g., using Socket.io).
6. Test API responses for latency to ensure real-time performance.
7. Deploy backend to a server (e.g., AWS/Heroku) and configure CORS for frontend access.
8. Update frontend to poll GET endpoints or connect to WebSocket for live updates.
9. Handle error cases (e.g., invalid input, server errors) in frontend with user-friendly messages.
10. Document API usage and add rate limiting to prevent abuse.
